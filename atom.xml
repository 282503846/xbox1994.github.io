<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tianyi's blog]]></title>
  <link href="http://xbox1994.github.io/atom.xml" rel="self"/>
  <link href="http://xbox1994.github.io/"/>
  <updated>2016-12-31T21:57:10+08:00</updated>
  <id>http://xbox1994.github.io/</id>
  <author>
    <name><![CDATA[Tianyi Wang]]></name>
    <email><![CDATA[tywang@thoughtworks.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning How to Learn]]></title>
    <link href="http://xbox1994.github.io/blog/2016/12/31/learning-how-to-learn/"/>
    <updated>2016-12-31T18:05:30+08:00</updated>
    <id>http://xbox1994.github.io/blog/2016/12/31/learning-how-to-learn</id>
    <content type="html"><![CDATA[<p>在过去的很多年时间里,我很少,其他人也很少告诉我们自己该如何学习,而是告诉你时间是挤出来的,把时间花到学习上是唯一提高学习成绩的方法.</p>

<p>如果我能早一些看到<Learning how to learn>,或者说如果我能早一些意识到这一点,把其中的理论实践下去可能会以自己为例反驳上面的观点.</p>

<!--more-->


<p>我们时常听到一些感觉很矛盾的传说:某人特牛逼,学习总是名列前茅,还经常花时间去干别的事,如打篮球,玩游戏.我原来会觉得这种人肯定是天才,脑袋绝顶聪明那种,老师会告诉我们他是晚上熬夜用功.其实老师没有错,对绝大多数人来说,用功的自己比不用功的自己更强一些.
但是为什么就不能教一些学习的方法技巧给我们呢,一股脑将知识填给我们,不知道我们会因此忽略掉漏掉多少重要的东西,短暂的自习时间,没有机会让自己进入发散的思考模式.这是一个让我们自己花很大的代价去探索学习的路线的学习模式.</p>

<p>有两个大学老师给了我很深的印象,其中一个老师仅仅只是在四年中只会见上几面的实验课老师,他不会像其他老师用书本和例题对我们狂轰滥炸,而是用一种引导式的方法教会我们如何走向正确的解题方向</p>

<p><em><strong>然而现在开始学会学习,为时不晚</strong></em></p>

<p>一个月的时间将这门课过完一遍,一定要马上总结不然过一段时间就会如同失忆般问自己,&ldquo;我什么时候看过这个东西?&rdquo;</p>

<p>这是用Xmind画出来的在这门课中我觉得比较关键的知识和方法,红星标注的是具体学习方法
<img class="left" src="http://xbox1994.github.io/images/blog/learning_how_to_learn.png" width="1000" height="1000" title="image" alt="images">
这门课程从大脑工作原理开始,用生动形象的比喻和通俗易懂的语言结合现有神经学心理学研究成果告诉了一个可能的正确学习的方式.</p>

<p>了解到其中提到的几个学习方法或应试技巧(如番茄工作法,过度学习,交替学习,先难后易,Test List)其实对我们已经是很大的帮助了,剩下的只是自己去实践了.</p>

<h2>集中模式VS发散模式</h2>

<h3>集中模式</h3>

<p>运用已有知识进行习惯性的输出.就像Windows自带的三维弹球中的密集缓冲区一样,弹球在他们之间飞快的穿梭,但是仅限于缓冲区内部,一旦脱离密集缓冲区,弹球会失去约束力被重力引导到其他地区.<br/>
优点:已走过的老路无比通畅<br/>
缺点:难以突破习惯性思维</p>

<h3>发散模式</h3>

<p>思维不专注在某一细节,不局限于某一方向思考问题.三维弹球中的其他区域虽然没有密集缓冲区那样可以让弹球保持稳定的飞速运动,但一旦触发到某个机关,往往会触发到意向不到的情况.<br/>
优点:是很多创新,灵感,解决问题的新思路的来源<br/>
缺点:难以专注细节,无法考虑全面</p>

<h3>技巧:学会转换</h3>

<p>在爱迪生工作的休息间隙,他会拿着一个滚珠小憩一会,当他将要入睡的时候手会自觉松开,滚珠落地将他惊醒.<br/>
集中精力开始工作,发散思维得到联想,成千上万个灵感涌入爱迪生的脑袋.最简单的实践就是,集中精力工作之后将难题记住,午间休息时试图带入思考入睡.</p>

<h2>组块</h2>

<p>大脑中小而紧凑的信息包,每个组块相当于一小块记忆,组块越多是构造组块帝国的基石,但如何创造众多组块联系在一起的关系同样是非常重要的.如同用砖块砌墙,砖块重要,水泥与瓦工同样重要.</p>

<h3>如何组织信息包</h3>

<p>1.集中注意力
当我们试图get一个新知识时,集中注意力是废话一样的存在.
我的某高中老师讲过关于他的一个经历,当年他和一个成绩特别好的同学同桌时,每次他想上课找这个同桌唠唠嗑,该同桌都是一脸嫌弃并对他抛出了一个异常,然后他默默的掏出了自己的&hellip;自己玩去了</p>

<p>2.理解基本含义
这里涉及到学习的假象,自己以为这个基本含义我知道了,但是一到别人问你,一到考试的时候一脸懵逼,&ldquo;我记得我知道这个东西啊,怎么感觉又不是这个样子?&rdquo;.自信的小伙子,不要以为你真的学会了哦!<br/>
<em><strong>没有教会他人是绝对不能说自己完全掌握的哦</strong></em><br/>
Recall &amp;&amp; Self-test是发现假象的最好方式,用回顾所学知识和自测的方式来发现自己存在的问题.当你尝试过一次之后会立马发现,某些东西确实还没有掌握的那么清楚.当然加入学习小组帮助别人或者他人帮助自己学习也是非常好的方法,但不要变成了一个游戏小组</p>

<p>3.获取背景知识,得到应用场景
&ldquo;我会C/C++/R/Phthon/Java/Ruby/JS/Delphi/Shell语言,并且我会熟练使用它们&rdquo;.简历中如果有这句话看起来是非常耀眼.但是如果现在为我们自己的一个特定需求去挑选一个最合适的语言去开发,我们会如何选择?
就像工具箱你有几百个工具,但不知道什么时候应该使用哪一个,那么工具只会变成一堆破铜烂铁.</p>

<h2>学习的三大难题:假象 &amp;&amp; 遗忘 &amp;&amp; 拖延症</h2>

<h3>假象</h3>

<p>同上理解基本含义</p>

<h3>遗忘VS记忆</h3>

<p>工作记忆:有意识的处理事情时会调用的记忆区间,正常人大概可以同时关注4个工作记忆区间</p>

<p>长期记忆:工作记忆转化而来,比工作记忆稳定,但是依然需要间隔重复法来稳定记忆</p>

<p>我们在完成一件事情的时候我们的大脑只会在工作记忆区间寻觅需要的记忆,长期记忆会被调用到工作记忆区间协同工作.然而工作记忆非常不稳定,需要及时转化为长期记忆来长期储存.</p>

<p>下面是一些转化的技巧:
<strong><em>间隔重复法/保证正常休息/用线索构建记忆宫殿</em></strong></p>

<h3>拖延症</h3>

<p>原理:想学一个东西,但是由于某些原因,会产生一定的痛苦,没有办法坚持下去,然后就开始寻找可以令自己开心起来的东西,最后的结果是这个东西永远没有学会</p>

<p><strong><em>必杀技:番茄工作法 </em></strong><br/>
25分钟工作+5分钟奖励时间让你告别痛苦,专注过程.一切基于一个事实:一旦开始着手于你要完成的事,你就会发现其实并不是那么痛苦.</p>

<h2>鼓励师</h2>

<p>万万没有想到这门课里会出现一个鼓励师,给一个大大的赞!</p>

<h3>不需要羡慕天才</h3>

<p>1.智商天注定,现实已成定局,无法改变.<br/>
2.天才的优势导致了天才的劣势:能同时拥有很多工作记忆区块看起来什么都可以游刃有余,但是工作记忆锁住了思维,阻止了创新的思路.<br/>
3.蠢材的劣势构建了蠢材的优势:比天才少一些习惯性的思路,有可以轻松调取其他长期记忆的能力,从而多一些解决问题的思路,只要坚持努力下去就会有收获.<br/>
4.打开一扇窗的同时关了一道门.</p>

<h3>现实如此吗</h3>

<p>很遗憾,现实不是如此,世界的进步大部分来源于天才.詹姆斯·瓦特的多项蒸汽机关键技术.33岁任清华国学研究院导师的赵元任.莫扎特14岁时,在罗马的西斯廷小教堂听了一首经文歌的演唱后,就能凭记忆把它一个音一个音地默写出来.<br/>
现实有太多例子,送自己一个连接<a href="https://www.zhihu.com/question/34054445">https://www.zhihu.com/question/34054445</a></p>

<p>天才毕竟是少数,教育体系一定是要满足大多数的情况,因材施教很难实现,那我们就放任自己了吗?</p>

<h3>天才VS蠢材</h3>

<p><strong><em>天才足够堕落可以变得比蠢材更加蠢材,蠢材足够努力可以变得比天才更加天才.</em></strong></p>

<p>对的!一定有方法和技巧可以维护世界的平衡!<br/>
<em><strong>专练最难的部分可以提升相关天赋,多一种解决思路,多一些经验可以在下次决战的一瞬间秒杀天才</strong></em></p>

<h2>后记</h2>

<p>原理上写的并不多,因为原理比较容易理解,我更需要的是可以应用的学习方法与意识(在手旁放了一本&lt;代码整洁之道>发现我的代码真的变整洁了不少0.0).我总是喜欢在写一个东西的时候放上自己的评论,有点跑偏主题的意思,并且在最后一定要加上一个PS/后记.其实博客没那么多规定啦,毕竟这是属于我的地方,6点写到10点,是真的没感觉时间过的这么快.</p>

<p>对于我来说最大的问题是遗忘,所以间隔重复法对我来说应该效果很好.然而现在最大的问题是前端快要把我逼疯了QAQ.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你的名字。]]></title>
    <link href="http://xbox1994.github.io/blog/2016/12/25/ni-de-ming-zi-./"/>
    <updated>2016-12-25T15:57:48+08:00</updated>
    <id>http://xbox1994.github.io/blog/2016/12/25/ni-de-ming-zi-.</id>
    <content type="html"><![CDATA[<p>某夜,趟雨,迟到5分钟,坐下,观影,值了.</p>

<!--more-->


<p>这是我看过为数不多的电影之一,但这部电影的剧情是给我感触最深的.全剧可分为三个层次,每个层次内部有很强的主旨,但又有一条主线索贯穿其中.让人沉迷其中.</p>

<h2>若即若离</h2>

<p>若有若无的联系,情感是最为微妙的,非常容易迷住观众,引人入胜.</p>

<p>梦中交换身体,邂逅彼此,过着梦想的和从来没有过的生活,用文字约束着交流着.</p>

<p>&ldquo;姐姐你什么时候开始这么喜欢摸自己的胸啊.&rdquo;,&ldquo;你打太多份工了啊.&rdquo;&ldquo;还不是因为你乱花钱啊.&rdquo; 非常多有趣的细节让观众乐在其中.但令我印象最为深刻的还是两人之间从若有若无的联系到试图寻找对方的时刻,因为此时,两人已经无法分离.</p>

<h2>命中注定&amp;&amp;握在手里</h2>

<p>陨石掉落,再也见不到三叶了,看似一切都是命中注定,但是还好这是在电影中,一切都可以重新开始.让泷喝下那放了三年的口嚼酒,随后注定的是一场拯救.</p>

<p>人总是在寻找某个人,人总是在等待某个人,这样便产生了希望.泷一直在寻找三叶,拼了命的要救三叶,虽然他们一次都没有真正见过面,虽然三叶已经过世,但是命中注定是他们会相见的.</p>

<p>你可以说这就是剧本,剧本里的一切都是那么美好,即使出现跌宕起伏的情节也是为了吸人眼球.但是今天我发现一件很现实的事情,有个词叫做希望,就和今天过圣诞节一样,我们通常不会特别关注它的来龙去脉是如何的,而是它能给我们带来我们憧憬的美好,对爱人的眷念,只要不是狗血到不成样子的剧本或是有一些坏名声的节日,是很容易接受的.</p>

<h2>最怕做过的一切都是不值得的</h2>

<p>&ldquo;我好像在哪儿见过你&rdquo;,在观众都为最后一幕的擦肩而过感到心急时,泷终于说出了这句话,三叶泪流满面,&ldquo;我也是&rdquo;.这一瞬间是一个极致的泪点,以前经历过的简单而纯粹但又若即若离的爱情终于如愿以偿.但是,我好怕三叶没有被救回,好怕他们最后没有相见,好怕泷犹豫不决,好怕一切都是不值得的.</p>

<p>&ldquo;我好像在哪儿见过你&rdquo;,台词有写到,歌词有唱到,平时有说到.万一没有认出来呢,&ldquo;我好像是在哪里见过你,但是想不起来了,可能是上辈子或者梦中见到过吧&rdquo;.让我们相信"人世间所有的相遇都是久别重逢"也许是最有正能量的信念,能让我们珍惜眼前人.</p>

<p>但是如果真的没有认出来呢?那么做过的一切都是不值得吗? &ldquo;我喜欢你&rdquo;&ldquo;笨蛋你这样我怎么知道你叫什么啊(然而我差不多知道了)&rdquo;</p>

<h2>PS</h2>

<p>如果在一些字词中加入某种联系之后,产生羁绊,一切都变得美好了起来:<br/>
某个命中注定的夜晚,趟着淅淅沥沥的小雨,赶到了我的座位上,虽然迟到了5分钟,但看完发现然而并没有什么影响,看完了这部让我很有感触的电影,想到了遇到过的人与事,这部电影在情感细节方面抓的很过分,但这样刚好是我想要的.</p>

<p>&ldquo;这电影怎么这么乱,我就记得他们一直在跑啊跑啊跑啊的&rdquo;,&ldquo;算了吧,你这小伙子这智商完全跟我们不在一个频道上&rdquo;.下电梯时在人群中听到这番闲聊.但是,有什么问题呢?跑,是真的可以概括这部大作.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NUS后台]]></title>
    <link href="http://xbox1994.github.io/blog/2016/12/18/nusde-hou-tai/"/>
    <updated>2016-12-18T16:12:24+08:00</updated>
    <id>http://xbox1994.github.io/blog/2016/12/18/nusde-hou-tai</id>
    <content type="html"><![CDATA[<p>Nginx Unicorn Sinatra<br/>
研究一个后台架构,客户端发送的请求最开始是由是Nginx接收的,随后反向代理发送给Unicorn服务器的一个线程,接下来是Sinatra框架和Rack负责处理</p>

<!--more-->


<h3>Nginx</h3>

<p>是一个高性能的HTTP和反向代理服务器</p>

<p>根据以下文件你可以发现在SF中我们是如何使用nginx的
infrastructure/ansible/roles.add_app_to_nginx/files/sales_refresh_app_nginx_config</p>

<pre><code>server {
    #监听端口号
    listen 80;
    #会根据收到的HOST来匹配哪一个server，这样随便写没有匹配到的，那么第一个就是默认的
    server_name _;
    #重定向http请求为https
    return 301 https://$http_host$request_uri;
}

upstream unicorn_server {
    #IPC方式与unicorn通信，unicorn.rb
    server unix:/usr/share/nginx/sales_refresh_app/tmp/sockets/unicorn.sock
    #0让nginx反复重试后端即使超时，配合下面的unicorn配置文件使用
    fail_timeout=0;
}

server {
    listen 443;
    server_name _;
    #可直接访问静态文件
    root /usr/share/nginx/sales_refresh_app/public;
    ssl on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    location / {
    #先查找是否有可以直接访问的文件，然后再去访问app
    try_files $uri @app;
    }
    location @app {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    # pass to the upstream unicorn server mentioned above
    proxy_pass http://unicorn_server;
    }
}
</code></pre>

<p>总结：在本机上同时使用nginx和unicorn，所以用到了反向代理，没有用到负载均衡。只提供https协议访问。静态文件加速访问。配置与unicorn的关系。</p>

<h3>Unicorn</h3>

<p>Unicorn 是一个为运行 Rack 应用的HTTP服务器。
Rack是为使用Ruby开发web应用提供了一个最小的模块化和可修改的接口。用可能最简单的方式来包装HTTP请求和响应</p>

<p>与上下的关联
1. read/parse HTTP request headers in full
2. call Rack application（Sinatra）
3. write HTTP response back to the client</p>

<p>/Users/tywang/WuhanWork/sales-funnel/config.ru是入口文件
/Users/tywang/WuhanWork/sales-funnel/unicorn.rb
参考：<a href="https://unicorn.bogomips.org/Unicorn/Configurator.html#method-i-worker_processes">https://unicorn.bogomips.org/Unicorn/Configurator.html#method-i-worker_processes</a></p>

<p>unicorn.rb:</p>

<pre><code>#where do app live???
@dir = "/usr/share/nginx/sales_refresh_app/"

worker_processes 8
working_directory @dir

#设置worker_processes的超时时间（handling the request/app.call/response cycle）单位秒，如果超时将被sigkill
timeout 300

# Specify path to socket unicorn listens to,
# used in  nginx.conf 
listen "#{@dir}tmp/sockets/unicorn.sock" , :backlog =&gt; 64

# Set process id path
pid "#{@dir}tmp/pids/unicorn.pid"

# Set log file paths
stderr_path "#{@dir}log/unicorn.stderr.log"
stdout_path "#{@dir}log/unicorn.stdout.log"
</code></pre>

<p>以前碰到过的一个问题：不启用nginx和unicorn时，当程序出错，代码中不处理错误而是抛出错误会导致服务器挂掉，似乎sinatra也没有管。
答：thin是单线程的，如果代码不够健壮导致thin挂了一次就无法恢复了，unicorn是多线程的，worker_processes默认有8个哦，如果超时会被kill掉再启动的，每个worker_process只能同时服务一个client，所以并发性能很差</p>

<p>那么问题又来了，单线程如何实现高性能并发处理？
<a href="https://github.com/eventmachine/eventmachine">https://github.com/eventmachine/eventmachine</a></p>

<h3>Sinatra</h3>

<p>Sinatra is a DSL for quickly creating web applications in Ruby with minimal effort
对我们来说就是一个Ruby开发框架，用Sinatra的写法简化我们的开发，一个基于Rack的框架</p>

<p>总结：Request->Nginx->Unicorn->Rack(Sinatra)->App</p>

<p>其他：Nginx+Unicorn+Sinatra部署方案
<a href="http://recipes.sinatrarb.com/p/deployment/nginx_proxied_to_unicorn">http://recipes.sinatrarb.com/p/deployment/nginx_proxied_to_unicorn</a></p>
]]></content>
  </entry>
  
</feed>
